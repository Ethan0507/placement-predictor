{"ast":null,"code":"import _slicedToArray from \"C:/Users/ethan/Projects/placement-predictor/client/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\n\nvar _s = $RefreshSig$();\n\nimport { useState, useCallback, useEffect } from 'react';\nimport { useHistory } from 'react-router-dom';\nvar logoutTimer;\nexport var useAuth = function useAuth() {\n  _s();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      token = _useState2[0],\n      setToken = _useState2[1];\n\n  var _useState3 = useState(false),\n      _useState4 = _slicedToArray(_useState3, 2),\n      userId = _useState4[0],\n      setUserId = _useState4[1];\n\n  var _useState5 = useState(false),\n      _useState6 = _slicedToArray(_useState5, 2),\n      userRole = _useState6[0],\n      setUserRole = _useState6[1];\n\n  var _useState7 = useState(),\n      _useState8 = _slicedToArray(_useState7, 2),\n      tokenExpirationDate = _useState8[0],\n      setTokenExpirationDate = _useState8[1];\n\n  var history = useHistory();\n  var login = useCallback(function (uid, token, role, expirationDate) {\n    setToken(token);\n    setUserId(uid);\n    setUserRole(role);\n    var tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\n    setTokenExpirationDate(tokenExpirationDate);\n    localStorage.setItem(\"userData\", JSON.stringify({\n      userId: uid,\n      token: token,\n      role: role,\n      expiration: tokenExpirationDate.toISOString()\n    }));\n    history.push('/');\n  }, []);\n  var logout = useCallback(function () {\n    setToken(null);\n    setTokenExpirationDate(null);\n    setUserId(null);\n    setUserRole(null);\n    localStorage.removeItem(\"userData\");\n  }, []);\n  useEffect(function () {\n    if (token && tokenExpirationDate) {\n      var remianingTime = tokenExpirationDate.getTime() - new Date().getTime();\n      logoutTimer = setTimeout(logout, remianingTime);\n    } else {\n      clearTimeout(logoutTimer);\n    }\n  }, [token, logout, tokenExpirationDate]);\n  useEffect(function () {\n    var storedData = JSON.parse(localStorage.getItem(\"userData\"));\n\n    if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\n      login(storedData.userId, storedData.token, new Date(storedData.expiration));\n    }\n  }, [login]);\n  return {\n    token: token,\n    login: login,\n    logout: logout,\n    userId: userId,\n    userRole: userRole\n  };\n};\n\n_s(useAuth, \"FNU1yq+Wka+fF+IXcaJRIeU3Pf4=\", false, function () {\n  return [useHistory];\n});","map":{"version":3,"sources":["C:/Users/ethan/Projects/placement-predictor/client/src/hooks/auth-hook.js"],"names":["useState","useCallback","useEffect","useHistory","logoutTimer","useAuth","token","setToken","userId","setUserId","userRole","setUserRole","tokenExpirationDate","setTokenExpirationDate","history","login","uid","role","expirationDate","Date","getTime","localStorage","setItem","JSON","stringify","expiration","toISOString","push","logout","removeItem","remianingTime","setTimeout","clearTimeout","storedData","parse","getItem"],"mappings":"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","sourcesContent":["import { useState , useCallback , useEffect } from 'react';\r\nimport { useHistory } from 'react-router-dom';\r\n\r\n\r\nlet logoutTimer;\r\n\r\nexport const useAuth = () => {\r\n    const [token, setToken] = useState();\r\n    const [userId, setUserId] = useState(false);\r\n    const [userRole, setUserRole] = useState(false);\r\n    const [tokenExpirationDate , setTokenExpirationDate] = useState();\r\n    \r\n    const history = useHistory();\r\n\r\n    const login = useCallback((uid, token, role, expirationDate) => {\r\n      setToken(token);\r\n      setUserId(uid);\r\n      setUserRole(role);\r\n      const tokenExpirationDate = expirationDate || new Date(new Date().getTime() + 1000 * 60 * 60);\r\n      setTokenExpirationDate(tokenExpirationDate);\r\n      localStorage.setItem(\r\n        \"userData\",\r\n        JSON.stringify({\r\n          userId: uid,\r\n          token: token,\r\n          role: role,\r\n          expiration: tokenExpirationDate.toISOString()\r\n        })\r\n      );\r\n      history.push('/');\r\n    }, []);\r\n    \r\n    const logout = useCallback(() => {\r\n      setToken(null);\r\n      setTokenExpirationDate(null);\r\n      setUserId(null);\r\n      setUserRole(null);\r\n      localStorage.removeItem(\"userData\");\r\n    }, []);\r\n    \r\n    \r\n    useEffect(() => {\r\n      if(token && tokenExpirationDate){\r\n        const remianingTime = tokenExpirationDate.getTime() - new Date().getTime();\r\n        logoutTimer = setTimeout(logout , remianingTime);\r\n      } else {\r\n        clearTimeout(logoutTimer);\r\n      }\r\n    } ,[token , logout , tokenExpirationDate]);\r\n    \r\n    useEffect(() => {\r\n      const storedData = JSON.parse(localStorage.getItem(\"userData\"));\r\n      if (storedData && storedData.token && new Date(storedData.expiration) > new Date()) {\r\n        login(storedData.userId, storedData.token ,  new Date(storedData.expiration));\r\n      }\r\n    }, [login]);\r\n    \r\n    return { token, login, logout, userId, userRole };\r\n};"]},"metadata":{},"sourceType":"module"}